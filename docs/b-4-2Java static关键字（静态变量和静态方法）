## 静态变量（因为静态变量与所有的对象实例共享，因此他们不具线程安全性）

### 分类

类的成员变量可以分为以下两种：

1. 静态变量（或称为类变量），指被 static 修饰的成员变量。

1. 实例变量，指没有被 static 修饰的成员变量。



### 区别

静态变量与实例变量的区别如下：

1）静态变量

- 运行时，Java 虚拟机只为静态变量分配**一次内存**，在**加载类的过程中完成**静态变量的内存分配。

- 在类的内部，可以在任何方法内直接访问静态变量。

- 在其他类中，可以通过类名访问该类中的静态变量。

2）实例变量

- **每创建一个实例**，Java 虚拟机就会为实例变量**分配一次内存**。

- 在类的内部，可以在非静态方法中直接访问实例变量。

- 在本类的静态方法或其他类中则需要通过类的实例对象进行访问。



### 作用

静态变量在类中的作用如下：

- 静态变量可以被类的所有实例共享，因此静态变量可以作为实例之间的共享数据，增加实例之间的交互性。

- 如果类的所有实例都包含一个相同的常量属性，则可以把这个属性定义为静态常量类型，从而节省内存空间。例如，在类中定义一个静态常量 PI。



## 静态方法

### 三点

1. 与静态变量一样，静态方法是属于类而不是实例。

1. 一个静态方法只能使用静态变量和调用静态方法。通常静态方法通常用于想给其他的类使用而不需要创建实例。例如：Collections class(类集合)。

1. Java的包装类和实用类包含许多静态方法。main()方法就是Java程序入口点，是静态方法。



### 分类：

与成员变量类似，成员方法也可以分为以下两种：

1. 静态方法（或称为类方法），指被 static 修饰的成员方法。

1. 实例方法，指没有被 static 修饰的成员方法。



### 区别

静态方法与实例方法的区别如下：

- 静态方法不需要通过它所属的类的任何实例就可以被调用，因此在静态方法中不能使用 this 关键字，也不能直接访问所属类的实例变量和实例方法，但是可以直接访问所属类的静态变量和静态方法。另外，和 this 关键字一样，super 关键字也与类的特定实例相关，所以在静态方法中也不能使用 super 关键字。

- 在实例方法中可以直接访问所属类的静态变量、静态方法、实例变量和实例方法。

在访问非静态方法时，需要通过实例对象来访问，而在访问静态方法时，可以直接访问，也可以通过类名来访问，还可以通过实例化对象来访问。



## 静态代码块

### 定义

静态代码块指 Java 类中的 static{ } 代码块，主要用于初始化类，为类的静态变量赋初始值，提升程序性能。

### 三点

Java的静态块是一组指令在类装载的时候在内存中由Java ClassLoader执行。

静态块常用于初始化类的静态变量。大多时候还用于在类装载时候创建静态资源。

Java不允许在静态块中使用非静态变量。一个类中可以有多个静态块，尽管这似乎没有什么用。静态块只在类装载入内存时，执行一次。



### 静态代码块的特点如下：

- 静态代码块类似于一个方法，但它不可以存在于任何方法体中。

- 静态代码块可以置于类中的任何地方，类中可以有多个静态初始化块。 

- Java 虚拟机在加载类时执行静态代码块，所以很多时候会将一些只需要进行一次的初始化操作都放在 static 代码块中进行。

- 如果类中包含多个静态代码块，则 Java 虚拟机将按它们在类中出现的顺序依次执行它们，每个静态代码块只会被执行一次。

- 静态代码块与静态方法一样，不能直接访问类的实例变量和实例方法，而需要通过类的实例对象来访问。



## [静态类](https://hollischuang.github.io/toBeTopJavaer/#/basics/java-basic/static-in-java?id=%e9%9d%99%e6%80%81%e7%b1%bb)

### 两点

Java可以嵌套使用静态类，但是静态类不能用于嵌套的顶层。

静态嵌套类的使用与其他顶层类一样，嵌套只是为了便于项目打包

