![](https://tcs-ga.teambition.net/storage/111xb4fc86ba416fb8e87ef4a14f7bbc3b70?Signature=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJBcHBJRCI6IjU5Mzc3MGZmODM5NjMyMDAyZTAzNThmMSIsIl9hcHBJZCI6IjU5Mzc3MGZmODM5NjMyMDAyZTAzNThmMSIsIl9vcmdhbml6YXRpb25JZCI6IiIsImV4cCI6MTYwMjIzOTU0NCwiaWF0IjoxNjAxNjM0NzQ0LCJyZXNvdXJjZSI6Ii9zdG9yYWdlLzExMXhiNGZjODZiYTQxNmZiOGU4N2VmNGExNGY3YmJjM2I3MCJ9.tMqKRDzYREAA-2reFH0JiCjSyuFg1pwYBcdgVpx6_ZQ&download=image.png "")

### 封装相关

- 什么是封装？

将代码及其处理的数据绑定在一起的一种编程机制，该机制保证了程序和数据都不受外部干扰且不被误用。封装的目的在于保护信息

- 封装的优点？

1. 保护类中的信息，它可以阻止在外部定义的代码随意访问内部代码和数据。

1. 隐藏细节信息，一些不需要程序员修改和使用的信息，比如取款机中的键盘，用户只需要知道按哪个键实现什么操作就可以，至于它内部是如何运行的，用户不需要知道。

1. 有助于建立各个系统之间的松耦合关系，提高系统的独立性。当一个系统的实现方式发生变化时，只要它的接口不变，就不会影响其他系统的使用。例如 U 盘，不管里面的存储方式怎么改变，只要 U 盘上的 USB 接口不变，就不会影响用户的正常操作。

1. 提高软件的复用率，降低成本。每个系统都是一个相对独立的整体，可以在不同的环境中得到使用。例如，一个 U 盘可以在多台电脑上使用。

- 封装的特点？

Java 语言的基本封装单位是类

Java 提供了私有和公有的访问模式，类的公有接口代表外部的用户应该知道或可以知道的每件东西，私有的方法数据只能通过该类的成员代码来访问，这就可以确保不会发生不希望的事情。

###  继承相关

- 继承的作用？

实现代码复用

- 继承的规则？

    - 子类继承父类非private的属性和方法

    - 子类可以扩展自己的属性和方法

- 构造器是否会被继承？

    - 构造器不会被继承，但子类对象初始化时会调用父类无参构造器【为什么。子类和父类有最基本的依赖关系，比如说数据依赖】

    - 当父类显式写了有参构造器，且没有无参构造器。子类继承父类的时候必须**显式的调用父类的有参构造器。**调用的方式可以使用super(a,b)来调用。

- 子类父类的初始化顺序原则：静态优于非静态，父类优于子类​- 父类静态变量，静态语句块- 子类静态变量，静态语句块​- 父类非静态代码块，构造器- 子类非静态代码块，构造器

### 多态相关

- 什么是多态？

一类事物的多种表现形态。（比如手机有各种各样的品牌，但都属于手机这一类事物）

- 如何体现多态？

        1. 方法重载：针对本类的不同方法而言，方法名相同，参数不同（个数，顺序）【返回类型随意】

        1. 方法重写：针对继承而言，除了方法体可以自定义外，其他必须与父类保持一致（方法名，返回类型，参数）

- 多态有什么特点？

多态性允许一个接口被多个同类使用，弥补了单继承的不足

- 向上转型&向下转型

up：子类转换为父类，目的是访问父类的公共方法，实现代码的复用和简洁（比如100个类把公共方法写在父类中，就不需要每个类都写一遍了）

down：父类转换为子类，据说是为了调用子类的扩展方法。（为啥不直接new一个对象）

- 多态的必要条件：（为了实现运行期的多态，或者说是动态绑定，需要满足三个条件）

即有**类继承或者接口实现**、**子类要重写父类的方法**、**父类的引用指向子类的对象**。

```java
public class Parent{

    public void call(){
        sout("im Parent");
    }
}

public class Son extends Parent{// 1.有类继承或者接口实现
    public void call(){// 2.子类要重写父类的方法
        sout("im Son");
    }
}

public class Daughter extends Parent{// 1.有类继承或者接口实现
    public void call(){// 2.子类要重写父类的方法
        sout("im Daughter");
    }
}

public class Test{

    public static void main(String[] args){
        Parent p = new Son(); //3.父类的引用指向子类的对象
        Parent p1 = new Daughter(); //3.父类的引用指向子类的对象
    }
}
```

这样，就实现了多态，同样是Parent类的实例，p.call 调用的是Son类的实现、p1.call调用的是Daughter的实现。

    - 多态还分为动态多态和静态多态

多态应该是一种运行期特性，Java中的重写是多态的体现。不过也有人提出重载是一种静态多态的想法，这个问题在StackOverflow等网站上有很多人讨论，但是并没有什么定论。我更加倾向于重载不是多态。





### 继承、实现、依赖、关联、聚合、组合的联系与区别

继承（泛化）：一个类（称为子类、子接口）继承另外的一个类（称为父类、父接口）的功能，并可以增加它自己的新功能的能力

实现:一个class类实现interface接口（可以是多个）的功能

依赖:一个类A使用到了另一个类B，而这种使用关系是具有偶然性的、临时性的、非常弱的，但是B类的变化会影响到A

关联:两个类、或者类与接口之间语义级别的一种强依赖关系

聚合:聚合是关联关系的一种特例，他体现的是整体与部分、拥有的关系，即has-a的关系，此时整体与部分之间是可分离的，他们可以具有各自的生命周期，部分可以属于多个整体对象，也可以为多个整体对象共享；

组合:组合也是关联关系的一种特例，他体现的是一种contains-a的关系，这种关系比聚合更强，也称为强聚合；他同样体现整体与部分间的关系，但此时整体与部分是不可分的，整体的生命周期结束也就意味着部分的生命周期结束

**组合>聚合>关联>依赖；**

**从语义上来看**

　　继承(A is B)

　　关联、聚合、组合(A has B)

　　依赖(A use B)

**当组合与依赖结合时，可以替代继承**

　　组合+依赖（基于对象） vs 继承（面向对象）

