***

![](https://tcs-ga.teambition.net/storage/111xf6fd11fdf6f03c1a1c7c742f5ccb9ab3?Signature=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJBcHBJRCI6IjU5Mzc3MGZmODM5NjMyMDAyZTAzNThmMSIsIl9hcHBJZCI6IjU5Mzc3MGZmODM5NjMyMDAyZTAzNThmMSIsIl9vcmdhbml6YXRpb25JZCI6IiIsImV4cCI6MTYwMjI0MDEwNCwiaWF0IjoxNjAxNjM1MzA0LCJyZXNvdXJjZSI6Ii9zdG9yYWdlLzExMXhmNmZkMTFmZGY2ZjAzYzFhMWM3Yzc0MmY1Y2NiOWFiMyJ9.MUlHaxjWbJJelYDdFOBAtCFTf96SLeg1Zy7mHBzlw04&download=image.png "")

## 2.1逻辑运算符

| 逻辑运算符包括 |  运算规则                                                         |
| ------- | ------------------------------------------------------------- |
| && 短路与  | 1. 两边都是true，结果是true2. 一边是false，结果是false短路特点：符号左边是false，右边不再运算 |
|  & 逻辑与  | 两边都是true，结果是true                                              |
| || 短路或  | 1. 两边都是false，结果是false2. 一边是true，结果是true短路特点： 符号左边是true，右边不再运算 |
|  | 逻辑或  | 1. 两边都是false，结果是false2. 一边是true，结果是true                       |
| ！逻辑非    | 1. ! true 结果是false2. ! false结果是true                           |
| ^ 逻辑异或  | 类似于：求不同。两边不一样为 true；两边一样为 false                               |

　　　　　**短路运算：**

　　　　　　短路运算是只判断第一个表达式的值而不再去判断第二个表达式，从而节省计算机判断的次数。

　　　　　**注意事项：**

　　　　　　1. 逻辑运算符只能用于boolean值。

　　　　　　2. 与、或需要左右各自有一个boolean值，但是取反只要有唯一的一个boolean值即可。

　　　　　　3. 与、或两种运算符，如果有多个条件，可以连续写。

　　　　　　　例：两个条件：条件A && 条件B     多个条件：条件A && 条件B && 条件C

## 2.2位运算符

位运算符效率很高，但是可读性不好。因为它是基于二进制的[**补码**](https://www.cnblogs.com/niujifei/p/11832232.html)直接运算的。

### 　　1、左移：<<

　　　　**运算规则**：<< 几位，就乘以 2 的 几次方；二进制补码左移 n 位，右边补 0

　　　　Demo：

```text
 System.out.println(4 << 3); //等价于4乘以2的3次方，4*8=32  
```

### 　　2、右移：>>

　　　　**运算规则**：>> 几位，就除以 2 的几次方；二进制补码右移 n 位，左边补0还是1，看最高位

　　　　Demo：

```text
 System.out.println(32 >>4); //等价于32除以2的4次方，32/16 =2 System.out.println(-32 >>4);  //等价于-32除以2的4次方，-32/16 =-2
```

### 　　3、无符号右移：>>>

　　　　**运算规则**：二进制补码右移n位，左边补0；对于负数来说，移完后，变为正数

　　　　Demo：

```text
System.out.println(32 >>> 4);   //和>>一样，左边补0 System.out.println(-32 >>> 4);  
```

### 　　4、按位与：&　

　　**　　运算规则：　**

　　　　　　1 | 1 结果1



　　　　　　1 | 0 结果1



　　　　　　0 | 1 结果1



　　　　　　0 | 0 结果0

　　　　Demo:

```text
System.out.println(32 & 25);
```

### 　　5、按位或：|

　　　　**运算规则：**

　　　　　　1 ^ 1 结果0



　　　　　　1 ^ 0 结果1



　　　　　　0 ^ 1 结果1



　　　　　　0 ^ 0 结果0

　　　　Demo：

```text
System.out.println(32 | 25);
```

### 　　6、按位异或：^

　　　　**运算规则：**

　　　　1 ^ 1 结果0



　　　　1 ^ 0 结果1



　　　　0 ^ 1 结果1



　　　　0 ^ 0 结果0　　　Demo：



```text
System.out.println(32 | 25);
```

### 　**　7、按位取反：~（一元运算符）**

　　　　**运算规则：**

**　　　　　　**~1 为 0 

　　　　　　~0 为 1

　　　　Demo：

```text
System.out.println(~3);
```

